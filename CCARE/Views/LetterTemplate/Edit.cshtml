@model CCARE.Models.LetterTemplateView

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutEntity.cshtml";
}

@section title
{
    Letter Template
}

@section entityLogo
{
    <img class="crm-logo" src="~/assets/images/ico_lrg_112.gif" />
}


@section formTitle
{
    <div class="text_title">
        <h1>Information</h1>
        Letter Template: @Model.LetterTemplate.Name
    </div>
}

@section navHeader
{
    <ul class="nav navbar-nav navbar-left">
        
        @if (Session["RoleID"] != null)
        {
            string entity = ViewContext.Controller.ControllerContext.RouteData.Values["controller"].ToString();
            Guid roleID = new Guid(Session["RoleID"].ToString());
            bool checkButton = CCARE.App_Function.RoleNPrivilege.checkEntityButtonByRoleID(roleID, entity, "Write");
            bool checkButton2 = CCARE.App_Function.RoleNPrivilege.checkEntityButtonByRoleID(roleID, entity, "Delete");
        
            if (checkButton == true )
            {
                if (Model.LetterTemplate.StateCode == 0)
                {
                    <text>
                        <li><a id="btn_save" href="#">Save</a></li>
                        <li><a id="btn_savenclose" href="#">Save & Close</a></li>
                        <li><a id="btn_savenopen" href="#">Save & New</a></li>
                        <li><a id="btn_attach" href="#" data-toggle="modal" data-target="#attach-file">Attach</a></li>
                    </text>
                }
                <li>
                    <a id="btn_changestatus" href="#" data-toggle="modal" data-target="#confirm-changestatus">
                    @if (Model.LetterTemplate.StateCode == 0)
                    {
                        <text>Deactivate</text>
                    }
                    else
                    {
                        <text>Activate</text>
                    }
                    </a>
                </li>
            }

            if (checkButton2 == true)
            {
            <text>
                <li><a id="btn_delete" href="#" data-toggle="modal" data-target="#confirm-delete">Delete</a></li>
            </text>
            }
        }
        
    </ul>
}

@section footerStatus
{
    <div class="footer_text">Status: 
    @if (Model.LetterTemplate.StateCode == 0)
    {
        <text>Active</text>
    }
    else
    {
        <text>Inactive</text>
    }

    </div>
}

@section sidebarMenu
{
    <li class="active"><a href="#">Information</a></li>
}

<div class="modal fade bs-example-modal-lg" id="attach-file" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">Add Attachment</h4>
      </div>
      <div class="modal-body">
          <div class="form-horizontal">
            <div class="row">
                <form id="form_attachment" name="form_attachment" action="@(Url.Action("UploadFile"))" method="POST" enctype="multipart/form-data" >
                    <div class="col-sm-8">                                        
                        <div class="form-group">
                            <label class="col-sm-2 control-label text-left"><strong>Filename:</strong></label>
                            <input type="file" id="import_filepath" name="import_filepath" class="col-sm-10 form-control" />
                            <iframe id="my_iframe" name="my_iframe" style="display:none"></iframe>
                        </div>
                    </div>
                    <div class="col-sm-2">                                        
                        <div class="form-group">
                            <div class="col-sm-12">
                                <input name="ObjectID" id="ObjectID" type="hidden" value="@Model.LetterTemplate.LetterTemplateId" />
                                <input name="ModifiedBy" id="ModifiedBy" type="hidden" value="@Model.LetterTemplate.ModifiedBy" />
                                <input name="BusinessUnitID" id="BusinessUnitID" type="hidden" value="@Model.LetterTemplate.OwningBusinessUnit" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
      </div>
      <div class="modal-footer">
        <button id="popupCancel" type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button id="popupAttach" type="button" class="btn btn-primary" onclick="submitAttachment();">Attach</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="confirm-delete" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Confirm Deletion</h1>
            </div>
            <div class="modal-body input-lg">
                The system will delete this record. This action cannot be undone, To continue click "Delete".
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a class="btn btn-danger btn-ok">Delete</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="confirm-changestatus" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Confirm @if (Model.LetterTemplate.StateCode == 0)
                            {<text>Letter Template Deactivation</text>}
                            else
                            {<text>Letter Template Activation</text>}</h1>
            </div>
            <div class="modal-body input-lg confirm-change-status">
                This action will change the status of selected Letter Template to @if (Model.LetterTemplate.StateCode == 0)
                                                                                          {<text>Inactive</text>}
                                                                                          else
                                                                                          {<text>Active</text>}. To continue click "Ok"
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a class="btn btn-danger btn-ok">Ok</a>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- tabs -->
    <div class="row">
        <div class="col-sm-12 panel panel-default panel_form_parent">
            <div class="myContent_noTab">
                <div class="tab-pane fade active in" id="general" aria-labelledby="general-tab">
                @using (Html.BeginForm("Edit", "LetterTemplate", FormMethod.Post, new { id = "form_lettertemplate" }))
                {                    
                    <!-- panel content -->
                    <div class="col-sm-12">
                        @Html.HiddenFor(x => x.LetterTemplate.LetterTemplateId)
                        @Html.HiddenFor(x => x.LetterTemplate.ModifiedBy)
                        @Html.HiddenFor(x => x.LetterTemplate.StatusCode)
                        <!-- START title 1 -->
                        <div class="row form_text">
                            <div class="panel panel-default panel_form_child">
                                <div class="panel-heading">
                                    <label class="control-label sv-header"><strong>General</strong></label>
                                </div>
                                <br />
                                <div class="panel-body">
                                    <div class="form-horizontal">
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label mandatory">Name</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.Name, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                                                              
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">Type</label>
                                                    <div class="col-sm-8">
                                                        @Html.HiddenFor(x => x.LetterTemplate.Type)
                                                        @Html.DropDownListFor(x => x.LetterTemplate.TypeLabel, (List<SelectListItem>)ViewBag.ddl_types, new { @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label mandatory">Language</label>
                                                    <div class="col-sm-8">
                                                        @Html.DropDownListFor(x => x.LetterTemplate.Language, (List<SelectListItem>)ViewBag.ddl_languages, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">ID</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.AutoID, new { @class = "form-control", @readonly = true })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label">Description 1</label>
                                                    <div class="col-sm-10">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.Description1, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label">Description 2</label>
                                                    <div class="col-sm-10">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.Description2, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label">Description 3</label>
                                                    <div class="col-sm-10">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.Description3, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-2 control-label">Description 4</label>
                                                    <div class="col-sm-10">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.Description4, new { @class = "form-control" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                        <!-- END title 1 -->
                        <!-- START title 2 -->
                        <div class="row form_text">
                            <div class="panel panel-default panel_form_child">
                                <div class="panel-heading">
                                    <label class="control-label sv-header"><strong>Timestamp Information</strong></label>
                                </div>
                                <br />
                                <div class="panel-body">
                                    <div class="form-horizontal">

                                        <div class="row">
                                            <div class="col-sm-6">
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">Created By</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.CreatedByName, new { @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">Created On</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.CreatedOn, new { Value = @Model.LetterTemplate.CreatedOn.Value.ToString("dd/MM/yyyy HH:mm"), @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">Modified By</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.ModifiedByName, new { @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                                                              
                                                <div class="form-group">
                                                    <label class="col-sm-4 control-label">Modified On</label>
                                                    <div class="col-sm-8">
                                                        @Html.TextBoxFor(x => x.LetterTemplate.ModifiedOn, new { Value = @Model.LetterTemplate.ModifiedOn.Value.ToString("dd/MM/yyyy HH:mm"), @class = "form-control", @disabled = "disabled" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- END title 2 -->      
                        <!-- START title 3 -->
                        @if (Model.Annotation != null)
                        {
                        <div class="row form_text">
                            <div class="panel panel-default panel_form_child">
                                <div class="panel-heading">
                                    <label class="control-label sv-header"><strong>Attachment</strong></label>
                                </div>
                                <div class="panel-body">
                                    <div class="form-horizontal">
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    @Html.HiddenFor(x => x.Annotation.AnnotationID)
                                                    <label class="col-sm-12 control-label text-left-i">Title: @Model.Annotation.Subject</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-12 control-label text-left-i">Note created on @Model.Annotation.CreatedOn.Value.ToString("dd/MM/yyyy HH:mm")</label>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-12 control-label">Note modified on @Model.Annotation.ModifiedOn.Value.ToString("dd/MM/yyyy HH:mm")</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-12 control-label text-left-i">By @Model.Annotation.CreatedBy</label>
                                                </div>
                                            </div>
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <label class="col-sm-12 control-label">By @Model.Annotation.ModifiedBy</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-6">                                        
                                                <div class="form-group">
                                                    <a href="javascript:void(0)" class="col-sm-12 control-label text-left-i" id="btnDownload"><b>@Model.Annotation.FileName (@Model.Annotation.FileSize.Value.ToString("#,###0") Byte(s))</b></a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                        <!-- END title 3 -->
                    </div>
                }
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        var entityName = '@ViewContext.RouteData.Values["Controller"].ToString()';

        var stateCode = '@(Model.LetterTemplate.StateCode)';
        if (stateCode == 1) {
            $("#form_lettertemplate select").attr('disabled', 'disabled');
            $("#form_lettertemplate input").attr('readonly', true);
        }

        function validateForm(action, formName) {
            var _name = $("#LetterTemplate_Name").val();
            if (!$.trim(_name)) {
                alert("@Resources.LetterTemplate.Alert_Name");
                $("#Name").val("");
                $("#Name").focus();
                return false;
            }
            formSubmit(action, formName);
        }

        $("#import_filepath").change(function () {
            var inputFile = $("#import_filepath");
            var filepath = inputFile.val();
            var result = true;

            if (filepath) {
                try {
                    var myFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var file = myFSO.getFile(filepath);
                    var size = file.size;
                    if (size > 5242880) {
                        alert("@Resources.LetterTemplate.Alert_MaxUploadFiles");
                        inputFile.replaceWith(inputFile = inputFile.clone(true));
                        result = false;
                    } else {
                        result = true;
                    }

                } catch (err) {
                    alert("@Resources.LetterTemplate.Alert_PleaseActivateActiveX");
                    inputFile.replaceWith(inputFile = inputFile.clone(true));
                    result = false;
                }
            }

            return result;
        });

        $("#btnDownload").click(function () {
            var form = document.createElement("form");
            form.action = '@(Url.Action("DownloadFile"))';
            form.method = 'POST';
            form.target = '_blank';
            var input = document.createElement("textarea");
            input.name = 'annotationID';
            input.value = $("#Annotation_AnnotationID").val();
            form.appendChild(input);
            form.style.display = 'none';
            document.body.appendChild(form);
            form.submit();
        });

        $("#btn_save").click(function () {
            validateForm("save", $("#form_lettertemplate"));
        });

        $("#btn_savenclose").click(function () {
            validateForm("saveNClose", $("#form_lettertemplate"));
        });

        $("#btn_savenopen").click(function () {
            validateForm("saveNOpen", $("#form_lettertemplate"));
        });

        $("#confirm-delete").on('show.bs.modal', function (e) {
            $(this).find('.btn-ok').click(function () {
                var postData = {
                    _resolution: "",
                    _description: ""
                };

                otherAction($("#form_lettertemplate"), "/" + entityName + "/Delete", "delete", postData)
            });
        });

        $("#confirm-changestatus").on('show.bs.modal', function (e) {
            $(this).find('.btn-ok').click(function () {
                var postData = {
                    _resolution: "",
                    _description: ""
                };

                otherAction($("#form_lettertemplate"), "/" + entityName + "/ChangeStatus", "changestatus", postData)
            });
        });

    });

    function submissionSuccess() {
        var result = $('#my_iframe').contents().find('body').html();
        var data = JSON.parse(result);
        if (data.Value) {
            window.location.replace(data.Response);
        } else {
            alert(data.Response);
        }
        jQuery.unblockUI();
    }

    function submitAttachment() {
        var filepath = $("#import_filepath").val();
        if (filepath) {
            var ext = ".docx";
            var fileExt = filepath.substr(filepath.length - ext.length, ext.length);
            if (fileExt.toLowerCase() == ext.toLowerCase()) {
                jQuery.blockUI({ message: '<h4>Submitting attachment...</h4>' });
                document.getElementById('form_attachment').target = 'my_iframe';

                var callback = function () {
                    if (submissionSuccess)
                        submissionSuccess();
                    $('#my_iframe').unbind('load', callback);
                };

                $('#my_iframe').bind('load', callback);
                $('#form_attachment').submit();

            } else {
                alert('@Resources.LetterTemplate.Alert_OnlyDocument');
            }
        } else {
            alert('@Resources.LetterTemplate.Alert_NoFileAttached');
        }
    }
</script>
